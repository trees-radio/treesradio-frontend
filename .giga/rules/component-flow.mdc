---
description: Documents data flow and event handling between player, chat, playlist and toke session components
globs: src/components/**/*,src/stores/**/*,src/libs/**/*
alwaysApply: false
---


# component-flow

Core Component Interactions:

Player -> Playlist Flow:
- Player requests next media from playlist manager
- Playlist provides media metadata and source URL
- Player reports playback state changes
- Player syncs position data back to playlist
- Player sends completion events triggering next item

Chat -> Player Flow:
- Chat commands can control player state (skip, volume)
- Player state changes trigger chat notifications
- Media reactions flow from chat to player feedback
- Special commands trigger player size changes
- Admin chat commands override player controls

Toke Session -> Chat Flow:
- Toke events generate chat announcements
- Session state changes update chat notifications
- Participant joins/leaves reflected in chat
- Special 4/20 session effects integrate with chat
- Session completion triggers chat messages

Playlist -> Chat Flow:
- Playlist changes generate chat notifications
- Song additions/removals reflected in chat
- DJ rotation updates announced in chat
- Waitlist position changes trigger notifications
- Queue status updates sent to chat

Key Event Paths:
1. Media Control Flow:
- User Input -> Player Controls -> Media State -> Chat Notifications
- Playlist Updates -> Player Queue -> Playback Events -> Chat Messages

2. Session Coordination Flow:
- Toke Initiation -> Participant Tracking -> Chat Updates -> Session State
- Session Progress -> Chat Notifications -> User Feedback -> Session Control

3. User Interaction Flow:
- Chat Commands -> Player/Playlist Actions -> State Changes -> Notifications
- User Reactions -> Media Feedback -> Statistics -> Chat Display

The system maintains synchronized state between components through event-driven updates, with chat serving as the primary user interface for system-wide notifications and control.

$END$